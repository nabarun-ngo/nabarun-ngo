name: Deploy to GCP
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
     # Determine the branch based on the environment
      - name: Setup branch
        id: set-branch
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "BRANCH=stage" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "BRANCH=master" >> $GITHUB_ENV
          fi

      # Checkout code from the determined branch
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}

       # Set up Java (e.g., JDK 17)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Cache Maven dependencies for faster builds
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      # Retrieve previous version and increment it
      - name: Get and increment version
        id: versioning
        run: |
          VERSION_FILE=".version"
          if [ -f "$VERSION_FILE" ]; then
            PREV_VERSION=$(cat $VERSION_FILE)
            IFS='.' read -r MAJOR MINOR <<< "$PREV_VERSION"
            MINOR=$((MINOR + 1))
            VERSION="${MAJOR}.${MINOR}"
          else
            VERSION="1.0" # Default version if file doesn't exist
          fi
          echo $VERSION > $VERSION_FILE
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Generated version: ${VERSION}"

      # Save the updated version as an artifact for future runs
      - name: Upload version file
        uses: actions/upload-artifact@v3
        with:
          name: version-file
          path: .version

      # Build the project using Maven and apply the version
      - name: Build with Maven
        run: mvn clean package -Drevision=${{ env.VERSION }}

      # Rename the JAR file with the generated version
      - name: Rename JAR File
        id: rename-jar
        run: |
          ORIGINAL_JAR=$(find ngo-nabarun-app/target -name "*.jar" | grep -v "sources.jar" | grep -v "javadoc.jar")
          NEW_JAR="target/app-${{ env.VERSION }}.jar"
          mv "${ORIGINAL_JAR}" "${NEW_JAR}"
          echo "NEW_JAR=${NEW_JAR}" >> $GITHUB_ENV
          echo "Renamed JAR file: ${NEW_JAR}"

      # Upload artifact for the deploy job
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-jar
          path: ${{ env.NEW_JAR }}
      

name: Deploy to GCP
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      release_type:
        description: "Type of release (major, minor, patch)"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          
jobs:
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    steps:
     # Determine the branch based on the environment
      - name: Setup branch
        id: set-branch
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "BRANCH=stage" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "BRANCH=master" >> $GITHUB_ENV
          fi

      # Checkout code from the determined branch
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}

      # Fetch latest Git tag
      - name: Fetch Latest Tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 || echo "0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV


      # Step 4: Increment the version based on user input
      - name: Increment Version
        id: increment_version
        run: |
          latest_tag=${{ env.latest_tag }}
          branch_name=${{ env.BRANCH }}
          release_type="${{ github.event.inputs.release_type }}"
          major=$(echo $latest_tag | cut -d. -f1)
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)

          if [[ "$release_type" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$release_type" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="${major}.${minor}.${patch}-${branch_name}"
          echo "new_version=$new_version" >> $GITHUB_ENV

       # Set up Java (e.g., JDK 17)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Cache Maven dependencies for faster builds
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-
  
      # Build the project using Maven
      - name: Build with Maven
        run: |
          mvn versions:set -DnewVersion=${{ env.new_version }}
          mvn clean package

      # Get the generated JAR file path
      - name: Get JAR file path
        id: get-jar-path
        run: |
          ORIGINAL_JAR=$(find ngo-nabarun-app/target -name "*.jar" | grep -v "sources.jar" | grep -v "javadoc.jar")
          JAR_PATH="ngo-nabarun-app/target/app-${{ env.BRANCH }}-${{ env.new_version }}.jar"
          mv "${ORIGINAL_JAR}" "${JAR_PATH}"
          echo "JAR_PATH=${JAR_PATH}" >> $GITHUB_ENV
          echo "Renamed JAR file path: ${JAR_PATH}"
          JAR_FILE="app-${{ env.BRANCH }}-${{ env.new_version }}.jar"
          echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV
          
      # Upload artifact for the deploy job
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4  
        with:
          name: app-jar
          path: ${{ env.JAR_PATH }}
          
      # Upload app.yaml for the deploy job
      - name: Upload app.yaml artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-yaml
          path: app.yaml
  deploy:
    name: Deploy to GCP
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Download the JAR artifact from the build job
      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: app-jar
          
      # Download the JAR artifact from the build job
      - name: Download app.yaml artifact
        uses: actions/download-artifact@v3
        with:
          name: app-yaml
   
      # Authenticate with Google Cloud
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ github.event.inputs.environment == 'production' && secrets.GCP_SA_KEY || secrets.GCP_SA_KEY_STAGE }}

      # Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ github.event.inputs.environment == 'production' && vars.GCP_PROJECT_ID || vars.GCP_PROJECT_ID_STAGE }}

      # Replace Env Var
      - name: Replace GCP Env Var
        uses: ikuanyshbekov/app-yaml-env-compiler@v1.0
        with:
          path: app.yaml
        env:
          ENVIRONMENT: '${{ vars.APP_ENV_STAGE }}'
          DOPPLER_PROJECT_NAME: '${{ vars.DOPPLER_PROJECT_NAME }}'
          DOPPLER_SERVICE_TOKEN: '${{ secrets.DOPPLER_SERVICE_TOKEN_STAGE }}'
          LOG_LEVEL: '${{ vars.LOG_LEVEL_STAGE }}'

      - name: Deploy to App Engine
        run: |
          # Deploy the JAR file with the current version
          gcloud app deploy ${{ env.JAR_FILE }} --appyaml=app.yaml --quiet --promote --project=${{ github.event.inputs.environment == 'production' && vars.GCP_PROJECT_ID || vars.GCP_PROJECT_ID_STAGE }}
      
  release_tag:
    name: Release Tag
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      # Step 1: Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Create a new Git tag
      - name: Create and Push Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "${{ env.new_version }}"
          git push origin "${{ env.new_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Deploy to GCP
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
     # Determine the branch based on the environment
      - name: Setup branch
        id: set-branch
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "BRANCH=stage" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "BRANCH=master" >> $GITHUB_ENV
          fi

      # Checkout code from the determined branch
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}

       # Set up Java (e.g., JDK 17)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Cache Maven dependencies for faster builds
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      # Build the project using Maven
      - name: Build with Maven
        run: mvn clean package

      # Get the generated JAR file path
      - name: Get JAR file path
        id: get-jar-path
        run: |
          JAR_PATH=$(find ngo-nabarun-app/target -name "*.jar" | grep -v "sources.jar" | grep -v "javadoc.jar")
          echo "JAR_PATH=${JAR_PATH}" >> $GITHUB_ENV
          echo "Generated JAR file path: ${JAR_PATH}"

      # Upload artifact for the deploy job
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-jar
          path: ${{ env.JAR_PATH }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Download the JAR artifact from the build job
      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: app-jar

      # Authenticate with Google Cloud
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ github.event.inputs.environment == 'production' && secrets.GCP_SA_KEY || secrets.GCP_SA_KEY_STAGE }}

      # Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ github.event.inputs.environment == 'production' && vars.GCP_PROJECT_ID || vars.GCP_PROJECT_ID_STAGE }}
      
      - name: Set Env Var
        uses: ikuanyshbekov/app-yaml-env-compiler@v1.0
        with:
          path: app.yaml
        env:
          ENVIRONMENT: '${{ vars.APP_ENV_STAGE }}'
          DOPPLER_PROJECT_NAME: '${{ vars.DOPPLER_PROJECT_NAME }}'
          DOPPLER_SERVICE_TOKEN: '${{ secrets.DOPPLER_SERVICE_TOKEN_STAGE }}'
          LOG_LEVEL: '${{ vars.LOG_LEVEL_STAGE }}'
      

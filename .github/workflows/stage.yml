name: Deploy Application to STAGE
on:
  push:
    branches:
      - stage
  workflow_dispatch:
    inputs:
     log_level:
          description: "Log Level"
          required: true
          default: "INFO"
          type: choice
          options:
            - DEBUG
            - INFO
            - ERROR
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: stage
        
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: adopt
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven- 
            
      - name: Build with Maven
        run: |
          mvn clean package
          
      - name: Get JAR file path
        id: get-jar-path
        run: |
          ORIGINAL_JAR=$(find ngo-nabarun-app/target -name "*.jar" | grep -v "sources.jar" | grep -v "javadoc.jar")
          JAR_PATH="ngo-nabarun-app/target/app.jar"
          mv "${ORIGINAL_JAR}" "${JAR_PATH}"
          echo "JAR_PATH=${JAR_PATH}" >> $GITHUB_ENV
          echo "Renamed JAR file path: ${JAR_PATH}"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-jar
          path: ${{ env.JAR_PATH }}
          retention-days: 1
          
      - name: Upload app.yaml artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-yaml
          path: app.yaml
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:   
      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: app-jar
          
      - name: Download app.yaml artifact
        uses: actions/download-artifact@v3
        with:
          name: app-yaml
        
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          project_id: '${{ vars.GCP_PROJECT_ID_STAGE }}'
          credentials_json: '${{ secrets.GCP_SA_KEY_STAGE }}'
          export_default_credentials: true
          
      - name: Setup Application Variables
        uses: ikuanyshbekov/app-yaml-env-compiler@v1.0
        with:
          path: app.yaml
        env:
          ENVIRONMENT: '${{ vars.APP_ENV_STAGE }}'
          DOPPLER_PROJECT_NAME: '${{ vars.DOPPLER_PROJECT_NAME }}'
          DOPPLER_SERVICE_TOKEN: '${{ secrets.DOPPLER_SERVICE_TOKEN_STAGE }}'
          LOG_LEVEL: '${{ github.event.inputs.log_level || vars.LOG_LEVEL_STAGE }}'
      
      - name: Deploy to Google App Engine
        uses: google-github-actions/deploy-appengine@v2
        with:
          project_id: '${{ vars.GCP_PROJECT_ID_STAGE }}'
          credentials: '${{ secrets.GCP_SA_KEY_STAGE }}'
          promote: true
          deliverables: app.jar
          flags: '--appyaml=app.yaml'
  clean:
    runs-on: ubuntu-latest
    needs: deploy
    steps:

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'
        service_account_key: ${{ secrets.GCP_SA_KEY_STAGE }}
        project_id: ${{ vars.GCP_PROJECT_ID_STAGE }}

    - name: Authenticate with gcloud
      run: |
        gcloud auth activate-service-account --key-file=${{ secrets.GCP_SA_KEY_STAGE }}

    - name: Get all App Engine versions except the latest
      id: get-app-engine-versions
      run: |
        APP_ENGINE_SERVICE=default
        gcloud app versions list \
          --service=$APP_ENGINE_SERVICE \
          --format="value(version.id)" \
          --sort-by="~createTime" | tail -n +2 > versions_to_delete.txt

    - name: Delete old App Engine versions
      if: success()
      run: |
        while read -r version; do
          echo "Deleting App Engine version: $version"
          gcloud app versions delete $version --service=default --quiet
        done < versions_to_delete.txt

    - name: Get all objects from Cloud Storage except the latest
      id: get-storage-objects
      run: |
        BUCKET=staging.ngonabarun-stage.appspot.com
        gcloud storage objects list \
          --bucket=$BUCKET \
          --format="value(name)" \
          --sort-by="~timeCreated" | tail -n +2 > objects_to_delete.txt

    - name: Delete old objects from Cloud Storage
      if: success()
      run: |
        BUCKET=staging.ngonabarun-stage.appspot.com
        while read -r object; do
          echo "Deleting Cloud Storage object: $object"
          gcloud storage objects delete gs://$BUCKET/$object --quiet
        done < objects_to_delete.txt

